/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSdfArgs } from "./CreateSdfArgs";
import { UpdateSdfArgs } from "./UpdateSdfArgs";
import { DeleteSdfArgs } from "./DeleteSdfArgs";
import { SdfFindManyArgs } from "./SdfFindManyArgs";
import { SdfFindUniqueArgs } from "./SdfFindUniqueArgs";
import { Sdf } from "./Sdf";
import { Sdfsdfsdf } from "../../sdfsdfsdf/base/Sdfsdfsdf";
import { SdfService } from "../sdf.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sdf)
export class SdfResolverBase {
  constructor(
    protected readonly service: SdfService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sdf",
    action: "read",
    possession: "any",
  })
  async _sdfsMeta(
    @graphql.Args() args: SdfFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sdf])
  @nestAccessControl.UseRoles({
    resource: "Sdf",
    action: "read",
    possession: "any",
  })
  async sdfs(@graphql.Args() args: SdfFindManyArgs): Promise<Sdf[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sdf, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sdf",
    action: "read",
    possession: "own",
  })
  async sdf(@graphql.Args() args: SdfFindUniqueArgs): Promise<Sdf | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sdf)
  @nestAccessControl.UseRoles({
    resource: "Sdf",
    action: "create",
    possession: "any",
  })
  async createSdf(@graphql.Args() args: CreateSdfArgs): Promise<Sdf> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        sdfsdfsdf: args.data.sdfsdfsdf
          ? {
              connect: args.data.sdfsdfsdf,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sdf)
  @nestAccessControl.UseRoles({
    resource: "Sdf",
    action: "update",
    possession: "any",
  })
  async updateSdf(@graphql.Args() args: UpdateSdfArgs): Promise<Sdf | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          sdfsdfsdf: args.data.sdfsdfsdf
            ? {
                connect: args.data.sdfsdfsdf,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sdf)
  @nestAccessControl.UseRoles({
    resource: "Sdf",
    action: "delete",
    possession: "any",
  })
  async deleteSdf(@graphql.Args() args: DeleteSdfArgs): Promise<Sdf | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Sdfsdfsdf, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sdfsdfsdf",
    action: "read",
    possession: "any",
  })
  async sdfsdfsdf(@graphql.Parent() parent: Sdf): Promise<Sdfsdfsdf | null> {
    const result = await this.service.getSdfsdfsdf(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
