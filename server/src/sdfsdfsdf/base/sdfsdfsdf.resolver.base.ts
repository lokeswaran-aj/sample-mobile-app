/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSdfsdfsdfArgs } from "./CreateSdfsdfsdfArgs";
import { UpdateSdfsdfsdfArgs } from "./UpdateSdfsdfsdfArgs";
import { DeleteSdfsdfsdfArgs } from "./DeleteSdfsdfsdfArgs";
import { SdfsdfsdfFindManyArgs } from "./SdfsdfsdfFindManyArgs";
import { SdfsdfsdfFindUniqueArgs } from "./SdfsdfsdfFindUniqueArgs";
import { Sdfsdfsdf } from "./Sdfsdfsdf";
import { SdfFindManyArgs } from "../../sdf/base/SdfFindManyArgs";
import { Sdf } from "../../sdf/base/Sdf";
import { SdfsdfsdfService } from "../sdfsdfsdf.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sdfsdfsdf)
export class SdfsdfsdfResolverBase {
  constructor(
    protected readonly service: SdfsdfsdfService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sdfsdfsdf",
    action: "read",
    possession: "any",
  })
  async _sdfsdfsdfsMeta(
    @graphql.Args() args: SdfsdfsdfFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sdfsdfsdf])
  @nestAccessControl.UseRoles({
    resource: "Sdfsdfsdf",
    action: "read",
    possession: "any",
  })
  async sdfsdfsdfs(
    @graphql.Args() args: SdfsdfsdfFindManyArgs
  ): Promise<Sdfsdfsdf[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sdfsdfsdf, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sdfsdfsdf",
    action: "read",
    possession: "own",
  })
  async sdfsdfsdf(
    @graphql.Args() args: SdfsdfsdfFindUniqueArgs
  ): Promise<Sdfsdfsdf | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sdfsdfsdf)
  @nestAccessControl.UseRoles({
    resource: "Sdfsdfsdf",
    action: "create",
    possession: "any",
  })
  async createSdfsdfsdf(
    @graphql.Args() args: CreateSdfsdfsdfArgs
  ): Promise<Sdfsdfsdf> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sdfsdfsdf)
  @nestAccessControl.UseRoles({
    resource: "Sdfsdfsdf",
    action: "update",
    possession: "any",
  })
  async updateSdfsdfsdf(
    @graphql.Args() args: UpdateSdfsdfsdfArgs
  ): Promise<Sdfsdfsdf | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sdfsdfsdf)
  @nestAccessControl.UseRoles({
    resource: "Sdfsdfsdf",
    action: "delete",
    possession: "any",
  })
  async deleteSdfsdfsdf(
    @graphql.Args() args: DeleteSdfsdfsdfArgs
  ): Promise<Sdfsdfsdf | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Sdf])
  @nestAccessControl.UseRoles({
    resource: "Sdf",
    action: "read",
    possession: "any",
  })
  async sdfs(
    @graphql.Parent() parent: Sdfsdfsdf,
    @graphql.Args() args: SdfFindManyArgs
  ): Promise<Sdf[]> {
    const results = await this.service.findSdfs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
